#!/usr/bin/env runhaskell

{-# LANGUAGE OverloadedStrings #-}

-- \ Saves input from `stdin` to a file with a timestamped filename.
-- Useful for taking notes or for writing journal entries.
--
-- To invoke an editor when run directly (not as part of a pipe), use an alias
-- like this:
--
--     alias note="if [ -t 0 ]; then; echo '' | vipe .markdown | note; else note; fi"
--

import           Control.Foldl (list)
import qualified Data.Text as Text
import           Data.Time.Format (formatTime)
import           System.Locale (defaultTimeLocale)
import           Turtle
import           Prelude hiding (FilePath)

main :: IO ()
main = do
  input <- fold stdin list
  if emptyInput input
  then err "aborted" >> exit 1
  else writeEntry (head input) (select input)

emptyInput :: [Text] -> Bool
emptyInput input = null input ||
  (null (tail input) && Text.null (Text.strip (head input)))

writeEntry :: Text -> Shell Text -> IO ()
writeEntry firstLine input = do
  now  <- date
  dir  <- notesDir now
  path <- notePath now dir firstLine 0
  mktree dir
  output path input
  real <- realpath path
  echo (either id id (toText real))

notesDir :: UTCTime -> IO FilePath
notesDir t = do
  myHome <- home
  return $ myHome </> "Documents" </> "notes" </> fromText year
  where
    year = fromString (formatTime defaultTimeLocale "%Y" t)

notePath :: UTCTime -> FilePath -> Text -> Int -> IO FilePath
notePath t parentDir firstLine n = do
  exists <- testfile path
  if exists then notePath t parentDir firstLine (n + 1) else return path
  where
    path   = parentDir </> fromText name
    name   = Text.take 64 (timestamp t <> prefix <> sanitize firstLine) <> ".markdown"
    prefix = if n <= 0 then "_" else "_" <> Text.pack (show n) <> "_"

timestamp :: UTCTime -> Text
timestamp = Text.pack . formatTime defaultTimeLocale "%Y-%m-%d"

sanitize :: Text -> Text
sanitize txt = Text.intercalate "-" (Text.split (not . pred) txt)
  where
    pred c = (c `elem` ['a'..'z']) ||
             (c `elem` ['A'..'Z']) ||
             (c `elem` ['0'..'9']) ||
             (c `elem` "'.-_,")
